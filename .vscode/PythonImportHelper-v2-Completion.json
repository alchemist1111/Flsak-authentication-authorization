[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "importPath": "auth",
        "description": "auth",
        "isExtraImport": true,
        "detail": "auth",
        "documentation": {}
    },
    {
        "label": "user_bp",
        "importPath": "users",
        "description": "users",
        "isExtraImport": true,
        "detail": "users",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "register_user",
        "kind": 2,
        "importPath": "auth",
        "description": "auth",
        "peekOfCode": "def register_user():\n    data = request.get_json()\n    user = User.get_user_by_name(username = data.get('username'))\n    if user is not None:\n        return jsonify({'error': 'Username already exists'}), 403\n    new_user = User(\n        username = data.get('username'),\n        email = data.get('email'),\n    )\n    new_user.set_password(password = data.get('password'))",
        "detail": "auth",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "auth",
        "description": "auth",
        "peekOfCode": "def login_user():\n    data = request.get_json()\n    user = User.get_user_by_name(username = data.get('username'))\n    if user and (user.check_password(password = data.get('password'))):\n        access_token = create_access_token(identity = user.username)\n        refresh_token = create_refresh_token(identity = user.username)\n        return jsonify(\n            {\n                'message': 'Logged in successfully',\n                'tokens' : {",
        "detail": "auth",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "auth",
        "description": "auth",
        "peekOfCode": "auth_bp = Blueprint('auth', __name__)\n@auth_bp.route('/register', methods=['POST'])\ndef register_user():\n    data = request.get_json()\n    user = User.get_user_by_name(username = data.get('username'))\n    if user is not None:\n        return jsonify({'error': 'Username already exists'}), 403\n    new_user = User(\n        username = data.get('username'),\n        email = data.get('email'),",
        "detail": "auth",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "extensions",
        "description": "extensions",
        "peekOfCode": "db = SQLAlchemy()\njwt = JWTManager()",
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "extensions",
        "description": "extensions",
        "peekOfCode": "jwt = JWTManager()",
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def create_app():\n    app = Flask(__name__)\n    app.config.from_prefixed_env()\n    # Initialize extensions\n    db.init_app(app)\n    jwt.init_app(app)\n    #Register blueprints\n    app.register_blueprint(auth_bp, url_prefix='/auth')\n    app.register_blueprint(user_bp, url_prefix='/all')\n    return app",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(255), unique=True, nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n    password = db.Column(db.String(100), nullable=False)\n    def set_password(self, password):\n        self.password = generate_password_hash(password)\n    def check_password(self, password):\n        return check_password_hash(self.password, password)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserSchema(Schema):\n    id = fields.Int()\n    username = fields.Str(required=True)\n    email = fields.Email(required=True)",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "kind": 2,
        "importPath": "users",
        "description": "users",
        "peekOfCode": "def get_all_users():\n    page = request.args.get('page', default=1, type=int)\n    per_page = request.args.get('per_page', default=3, type=int)\n    users = User.query.paginate(\n        page = page,\n        per_page = per_page\n    )\n    result = UserSchema().dump(users, many=True)\n    return jsonify({\n        'users': result,",
        "detail": "users",
        "documentation": {}
    },
    {
        "label": "user_bp",
        "kind": 5,
        "importPath": "users",
        "description": "users",
        "peekOfCode": "user_bp = Blueprint('user', __name__)\n@user_bp.route('/users', methods=['GET'])\n@jwt_required()\ndef get_all_users():\n    page = request.args.get('page', default=1, type=int)\n    per_page = request.args.get('per_page', default=3, type=int)\n    users = User.query.paginate(\n        page = page,\n        per_page = per_page\n    )",
        "detail": "users",
        "documentation": {}
    }
]